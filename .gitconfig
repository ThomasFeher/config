[merge]
	tool = vimdiff
	ff = false
[push]
	default = simple
[diff]
	tool = vimdiff
[difftool]
	prompt = false
[alias]
	lg = log --graph --all --format=format:'%C(red)%h%C(reset) - %C(green)(%ar)%C(reset) %C(blue)%s%C(reset) %C(white)- %an%C(reset)%C(yellow)%d%C(reset)' --abbrev-commit --date=relative
	lg2 = log --graph --all --format=format:'%C(red)%h%C(reset) - %C(green)%aD%C(reset) %C(green)(%ar)%C(reset)%C(yellow)%d%C(reset)%n''          %C(blue)%s%C(reset) %C(white)- %an%C(reset)' --abbrev-commit
	st = status
	ci = commit
	br = branch
	co = checkout
	df = diff
	dc = diff --cached
	# log with all changes as diff (patch)
	loog = log -p
	# show number of commits per user
	who = shortlog -s --
	# git graphviz | dotty /dev/stdin
	graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
	whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
	# see new commits on a branch
	new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
	# see fetched commits
	lc = log ORIG_HEAD.. --stat --no-merges
	# fetch from all remotes
	fa = fetch --all
	# fetch from all remotes and delete local branches whos remote tracking
	# branch was deleted
	fap = fetch --all --prune
	# checkout Gitlab merge requests using `git mr <remote> <x>` (x is the MR number)
	mr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -
	sw = switch
[color]
	ui = true
[core]
	pager = less -FRSX
	autocrlf = input
	editor = nvim
[include]
	path = .gitconfig_individual
[rebase]
	autosquash = true
[checkout]
    defaultRemote = origin
[init]
	defaultBranch = main
